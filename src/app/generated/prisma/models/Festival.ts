/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Festival` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Festival
 * 
 */
export type FestivalModel = runtime.Types.Result.DefaultSelection<Prisma.$FestivalPayload>

export type AggregateFestival = {
  _count: FestivalCountAggregateOutputType | null
  _min: FestivalMinAggregateOutputType | null
  _max: FestivalMaxAggregateOutputType | null
}

export type FestivalMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  location: string | null
  website: string | null
  imageUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FestivalMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  location: string | null
  website: string | null
  imageUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FestivalCountAggregateOutputType = {
  id: number
  name: number
  description: number
  location: number
  website: number
  imageUrl: number
  lineup: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type FestivalMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  location?: true
  website?: true
  imageUrl?: true
  createdAt?: true
  updatedAt?: true
}

export type FestivalMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  location?: true
  website?: true
  imageUrl?: true
  createdAt?: true
  updatedAt?: true
}

export type FestivalCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  location?: true
  website?: true
  imageUrl?: true
  lineup?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type FestivalAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Festival to aggregate.
   */
  where?: Prisma.FestivalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Festivals to fetch.
   */
  orderBy?: Prisma.FestivalOrderByWithRelationInput | Prisma.FestivalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FestivalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Festivals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Festivals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Festivals
  **/
  _count?: true | FestivalCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FestivalMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FestivalMaxAggregateInputType
}

export type GetFestivalAggregateType<T extends FestivalAggregateArgs> = {
      [P in keyof T & keyof AggregateFestival]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFestival[P]>
    : Prisma.GetScalarType<T[P], AggregateFestival[P]>
}




export type FestivalGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FestivalWhereInput
  orderBy?: Prisma.FestivalOrderByWithAggregationInput | Prisma.FestivalOrderByWithAggregationInput[]
  by: Prisma.FestivalScalarFieldEnum[] | Prisma.FestivalScalarFieldEnum
  having?: Prisma.FestivalScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FestivalCountAggregateInputType | true
  _min?: FestivalMinAggregateInputType
  _max?: FestivalMaxAggregateInputType
}

export type FestivalGroupByOutputType = {
  id: string
  name: string
  description: string | null
  location: string | null
  website: string | null
  imageUrl: string | null
  lineup: runtime.JsonValue
  createdAt: Date
  updatedAt: Date
  _count: FestivalCountAggregateOutputType | null
  _min: FestivalMinAggregateOutputType | null
  _max: FestivalMaxAggregateOutputType | null
}

type GetFestivalGroupByPayload<T extends FestivalGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FestivalGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FestivalGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FestivalGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FestivalGroupByOutputType[P]>
      }
    >
  > 



export type FestivalWhereInput = {
  AND?: Prisma.FestivalWhereInput | Prisma.FestivalWhereInput[]
  OR?: Prisma.FestivalWhereInput[]
  NOT?: Prisma.FestivalWhereInput | Prisma.FestivalWhereInput[]
  id?: Prisma.StringFilter<"Festival"> | string
  name?: Prisma.StringFilter<"Festival"> | string
  description?: Prisma.StringNullableFilter<"Festival"> | string | null
  location?: Prisma.StringNullableFilter<"Festival"> | string | null
  website?: Prisma.StringNullableFilter<"Festival"> | string | null
  imageUrl?: Prisma.StringNullableFilter<"Festival"> | string | null
  lineup?: Prisma.JsonFilter<"Festival">
  createdAt?: Prisma.DateTimeFilter<"Festival"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Festival"> | Date | string
}

export type FestivalOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  location?: Prisma.SortOrderInput | Prisma.SortOrder
  website?: Prisma.SortOrderInput | Prisma.SortOrder
  imageUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  lineup?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FestivalWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FestivalWhereInput | Prisma.FestivalWhereInput[]
  OR?: Prisma.FestivalWhereInput[]
  NOT?: Prisma.FestivalWhereInput | Prisma.FestivalWhereInput[]
  name?: Prisma.StringFilter<"Festival"> | string
  description?: Prisma.StringNullableFilter<"Festival"> | string | null
  location?: Prisma.StringNullableFilter<"Festival"> | string | null
  website?: Prisma.StringNullableFilter<"Festival"> | string | null
  imageUrl?: Prisma.StringNullableFilter<"Festival"> | string | null
  lineup?: Prisma.JsonFilter<"Festival">
  createdAt?: Prisma.DateTimeFilter<"Festival"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Festival"> | Date | string
}, "id">

export type FestivalOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  location?: Prisma.SortOrderInput | Prisma.SortOrder
  website?: Prisma.SortOrderInput | Prisma.SortOrder
  imageUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  lineup?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FestivalCountOrderByAggregateInput
  _max?: Prisma.FestivalMaxOrderByAggregateInput
  _min?: Prisma.FestivalMinOrderByAggregateInput
}

export type FestivalScalarWhereWithAggregatesInput = {
  AND?: Prisma.FestivalScalarWhereWithAggregatesInput | Prisma.FestivalScalarWhereWithAggregatesInput[]
  OR?: Prisma.FestivalScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FestivalScalarWhereWithAggregatesInput | Prisma.FestivalScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Festival"> | string
  name?: Prisma.StringWithAggregatesFilter<"Festival"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Festival"> | string | null
  location?: Prisma.StringNullableWithAggregatesFilter<"Festival"> | string | null
  website?: Prisma.StringNullableWithAggregatesFilter<"Festival"> | string | null
  imageUrl?: Prisma.StringNullableWithAggregatesFilter<"Festival"> | string | null
  lineup?: Prisma.JsonWithAggregatesFilter<"Festival">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Festival"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Festival"> | Date | string
}

export type FestivalCreateInput = {
  id?: string
  name: string
  description?: string | null
  location?: string | null
  website?: string | null
  imageUrl?: string | null
  lineup?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FestivalUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  location?: string | null
  website?: string | null
  imageUrl?: string | null
  lineup?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FestivalUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lineup?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FestivalUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lineup?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FestivalCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  location?: string | null
  website?: string | null
  imageUrl?: string | null
  lineup?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FestivalUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lineup?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FestivalUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lineup?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FestivalCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  location?: Prisma.SortOrder
  website?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  lineup?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FestivalMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  location?: Prisma.SortOrder
  website?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FestivalMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  location?: Prisma.SortOrder
  website?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type FestivalSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  location?: boolean
  website?: boolean
  imageUrl?: boolean
  lineup?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["festival"]>

export type FestivalSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  location?: boolean
  website?: boolean
  imageUrl?: boolean
  lineup?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["festival"]>

export type FestivalSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  location?: boolean
  website?: boolean
  imageUrl?: boolean
  lineup?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["festival"]>

export type FestivalSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  location?: boolean
  website?: boolean
  imageUrl?: boolean
  lineup?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type FestivalOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "location" | "website" | "imageUrl" | "lineup" | "createdAt" | "updatedAt", ExtArgs["result"]["festival"]>

export type $FestivalPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Festival"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    location: string | null
    website: string | null
    imageUrl: string | null
    lineup: runtime.JsonValue
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["festival"]>
  composites: {}
}

export type FestivalGetPayload<S extends boolean | null | undefined | FestivalDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FestivalPayload, S>

export type FestivalCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FestivalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FestivalCountAggregateInputType | true
  }

export interface FestivalDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Festival'], meta: { name: 'Festival' } }
  /**
   * Find zero or one Festival that matches the filter.
   * @param {FestivalFindUniqueArgs} args - Arguments to find a Festival
   * @example
   * // Get one Festival
   * const festival = await prisma.festival.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FestivalFindUniqueArgs>(args: Prisma.SelectSubset<T, FestivalFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FestivalClient<runtime.Types.Result.GetResult<Prisma.$FestivalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Festival that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FestivalFindUniqueOrThrowArgs} args - Arguments to find a Festival
   * @example
   * // Get one Festival
   * const festival = await prisma.festival.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FestivalFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FestivalFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FestivalClient<runtime.Types.Result.GetResult<Prisma.$FestivalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Festival that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FestivalFindFirstArgs} args - Arguments to find a Festival
   * @example
   * // Get one Festival
   * const festival = await prisma.festival.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FestivalFindFirstArgs>(args?: Prisma.SelectSubset<T, FestivalFindFirstArgs<ExtArgs>>): Prisma.Prisma__FestivalClient<runtime.Types.Result.GetResult<Prisma.$FestivalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Festival that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FestivalFindFirstOrThrowArgs} args - Arguments to find a Festival
   * @example
   * // Get one Festival
   * const festival = await prisma.festival.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FestivalFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FestivalFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FestivalClient<runtime.Types.Result.GetResult<Prisma.$FestivalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Festivals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FestivalFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Festivals
   * const festivals = await prisma.festival.findMany()
   * 
   * // Get first 10 Festivals
   * const festivals = await prisma.festival.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const festivalWithIdOnly = await prisma.festival.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FestivalFindManyArgs>(args?: Prisma.SelectSubset<T, FestivalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FestivalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Festival.
   * @param {FestivalCreateArgs} args - Arguments to create a Festival.
   * @example
   * // Create one Festival
   * const Festival = await prisma.festival.create({
   *   data: {
   *     // ... data to create a Festival
   *   }
   * })
   * 
   */
  create<T extends FestivalCreateArgs>(args: Prisma.SelectSubset<T, FestivalCreateArgs<ExtArgs>>): Prisma.Prisma__FestivalClient<runtime.Types.Result.GetResult<Prisma.$FestivalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Festivals.
   * @param {FestivalCreateManyArgs} args - Arguments to create many Festivals.
   * @example
   * // Create many Festivals
   * const festival = await prisma.festival.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FestivalCreateManyArgs>(args?: Prisma.SelectSubset<T, FestivalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Festivals and returns the data saved in the database.
   * @param {FestivalCreateManyAndReturnArgs} args - Arguments to create many Festivals.
   * @example
   * // Create many Festivals
   * const festival = await prisma.festival.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Festivals and only return the `id`
   * const festivalWithIdOnly = await prisma.festival.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FestivalCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FestivalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FestivalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Festival.
   * @param {FestivalDeleteArgs} args - Arguments to delete one Festival.
   * @example
   * // Delete one Festival
   * const Festival = await prisma.festival.delete({
   *   where: {
   *     // ... filter to delete one Festival
   *   }
   * })
   * 
   */
  delete<T extends FestivalDeleteArgs>(args: Prisma.SelectSubset<T, FestivalDeleteArgs<ExtArgs>>): Prisma.Prisma__FestivalClient<runtime.Types.Result.GetResult<Prisma.$FestivalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Festival.
   * @param {FestivalUpdateArgs} args - Arguments to update one Festival.
   * @example
   * // Update one Festival
   * const festival = await prisma.festival.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FestivalUpdateArgs>(args: Prisma.SelectSubset<T, FestivalUpdateArgs<ExtArgs>>): Prisma.Prisma__FestivalClient<runtime.Types.Result.GetResult<Prisma.$FestivalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Festivals.
   * @param {FestivalDeleteManyArgs} args - Arguments to filter Festivals to delete.
   * @example
   * // Delete a few Festivals
   * const { count } = await prisma.festival.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FestivalDeleteManyArgs>(args?: Prisma.SelectSubset<T, FestivalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Festivals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FestivalUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Festivals
   * const festival = await prisma.festival.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FestivalUpdateManyArgs>(args: Prisma.SelectSubset<T, FestivalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Festivals and returns the data updated in the database.
   * @param {FestivalUpdateManyAndReturnArgs} args - Arguments to update many Festivals.
   * @example
   * // Update many Festivals
   * const festival = await prisma.festival.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Festivals and only return the `id`
   * const festivalWithIdOnly = await prisma.festival.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FestivalUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FestivalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FestivalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Festival.
   * @param {FestivalUpsertArgs} args - Arguments to update or create a Festival.
   * @example
   * // Update or create a Festival
   * const festival = await prisma.festival.upsert({
   *   create: {
   *     // ... data to create a Festival
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Festival we want to update
   *   }
   * })
   */
  upsert<T extends FestivalUpsertArgs>(args: Prisma.SelectSubset<T, FestivalUpsertArgs<ExtArgs>>): Prisma.Prisma__FestivalClient<runtime.Types.Result.GetResult<Prisma.$FestivalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Festivals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FestivalCountArgs} args - Arguments to filter Festivals to count.
   * @example
   * // Count the number of Festivals
   * const count = await prisma.festival.count({
   *   where: {
   *     // ... the filter for the Festivals we want to count
   *   }
   * })
  **/
  count<T extends FestivalCountArgs>(
    args?: Prisma.Subset<T, FestivalCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FestivalCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Festival.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FestivalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FestivalAggregateArgs>(args: Prisma.Subset<T, FestivalAggregateArgs>): Prisma.PrismaPromise<GetFestivalAggregateType<T>>

  /**
   * Group by Festival.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FestivalGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FestivalGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FestivalGroupByArgs['orderBy'] }
      : { orderBy?: FestivalGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FestivalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFestivalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Festival model
 */
readonly fields: FestivalFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Festival.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FestivalClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Festival model
 */
export interface FestivalFieldRefs {
  readonly id: Prisma.FieldRef<"Festival", 'String'>
  readonly name: Prisma.FieldRef<"Festival", 'String'>
  readonly description: Prisma.FieldRef<"Festival", 'String'>
  readonly location: Prisma.FieldRef<"Festival", 'String'>
  readonly website: Prisma.FieldRef<"Festival", 'String'>
  readonly imageUrl: Prisma.FieldRef<"Festival", 'String'>
  readonly lineup: Prisma.FieldRef<"Festival", 'Json'>
  readonly createdAt: Prisma.FieldRef<"Festival", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Festival", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Festival findUnique
 */
export type FestivalFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Festival
   */
  select?: Prisma.FestivalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Festival
   */
  omit?: Prisma.FestivalOmit<ExtArgs> | null
  /**
   * Filter, which Festival to fetch.
   */
  where: Prisma.FestivalWhereUniqueInput
}

/**
 * Festival findUniqueOrThrow
 */
export type FestivalFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Festival
   */
  select?: Prisma.FestivalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Festival
   */
  omit?: Prisma.FestivalOmit<ExtArgs> | null
  /**
   * Filter, which Festival to fetch.
   */
  where: Prisma.FestivalWhereUniqueInput
}

/**
 * Festival findFirst
 */
export type FestivalFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Festival
   */
  select?: Prisma.FestivalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Festival
   */
  omit?: Prisma.FestivalOmit<ExtArgs> | null
  /**
   * Filter, which Festival to fetch.
   */
  where?: Prisma.FestivalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Festivals to fetch.
   */
  orderBy?: Prisma.FestivalOrderByWithRelationInput | Prisma.FestivalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Festivals.
   */
  cursor?: Prisma.FestivalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Festivals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Festivals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Festivals.
   */
  distinct?: Prisma.FestivalScalarFieldEnum | Prisma.FestivalScalarFieldEnum[]
}

/**
 * Festival findFirstOrThrow
 */
export type FestivalFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Festival
   */
  select?: Prisma.FestivalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Festival
   */
  omit?: Prisma.FestivalOmit<ExtArgs> | null
  /**
   * Filter, which Festival to fetch.
   */
  where?: Prisma.FestivalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Festivals to fetch.
   */
  orderBy?: Prisma.FestivalOrderByWithRelationInput | Prisma.FestivalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Festivals.
   */
  cursor?: Prisma.FestivalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Festivals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Festivals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Festivals.
   */
  distinct?: Prisma.FestivalScalarFieldEnum | Prisma.FestivalScalarFieldEnum[]
}

/**
 * Festival findMany
 */
export type FestivalFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Festival
   */
  select?: Prisma.FestivalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Festival
   */
  omit?: Prisma.FestivalOmit<ExtArgs> | null
  /**
   * Filter, which Festivals to fetch.
   */
  where?: Prisma.FestivalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Festivals to fetch.
   */
  orderBy?: Prisma.FestivalOrderByWithRelationInput | Prisma.FestivalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Festivals.
   */
  cursor?: Prisma.FestivalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Festivals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Festivals.
   */
  skip?: number
  distinct?: Prisma.FestivalScalarFieldEnum | Prisma.FestivalScalarFieldEnum[]
}

/**
 * Festival create
 */
export type FestivalCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Festival
   */
  select?: Prisma.FestivalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Festival
   */
  omit?: Prisma.FestivalOmit<ExtArgs> | null
  /**
   * The data needed to create a Festival.
   */
  data: Prisma.XOR<Prisma.FestivalCreateInput, Prisma.FestivalUncheckedCreateInput>
}

/**
 * Festival createMany
 */
export type FestivalCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Festivals.
   */
  data: Prisma.FestivalCreateManyInput | Prisma.FestivalCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Festival createManyAndReturn
 */
export type FestivalCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Festival
   */
  select?: Prisma.FestivalSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Festival
   */
  omit?: Prisma.FestivalOmit<ExtArgs> | null
  /**
   * The data used to create many Festivals.
   */
  data: Prisma.FestivalCreateManyInput | Prisma.FestivalCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Festival update
 */
export type FestivalUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Festival
   */
  select?: Prisma.FestivalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Festival
   */
  omit?: Prisma.FestivalOmit<ExtArgs> | null
  /**
   * The data needed to update a Festival.
   */
  data: Prisma.XOR<Prisma.FestivalUpdateInput, Prisma.FestivalUncheckedUpdateInput>
  /**
   * Choose, which Festival to update.
   */
  where: Prisma.FestivalWhereUniqueInput
}

/**
 * Festival updateMany
 */
export type FestivalUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Festivals.
   */
  data: Prisma.XOR<Prisma.FestivalUpdateManyMutationInput, Prisma.FestivalUncheckedUpdateManyInput>
  /**
   * Filter which Festivals to update
   */
  where?: Prisma.FestivalWhereInput
  /**
   * Limit how many Festivals to update.
   */
  limit?: number
}

/**
 * Festival updateManyAndReturn
 */
export type FestivalUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Festival
   */
  select?: Prisma.FestivalSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Festival
   */
  omit?: Prisma.FestivalOmit<ExtArgs> | null
  /**
   * The data used to update Festivals.
   */
  data: Prisma.XOR<Prisma.FestivalUpdateManyMutationInput, Prisma.FestivalUncheckedUpdateManyInput>
  /**
   * Filter which Festivals to update
   */
  where?: Prisma.FestivalWhereInput
  /**
   * Limit how many Festivals to update.
   */
  limit?: number
}

/**
 * Festival upsert
 */
export type FestivalUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Festival
   */
  select?: Prisma.FestivalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Festival
   */
  omit?: Prisma.FestivalOmit<ExtArgs> | null
  /**
   * The filter to search for the Festival to update in case it exists.
   */
  where: Prisma.FestivalWhereUniqueInput
  /**
   * In case the Festival found by the `where` argument doesn't exist, create a new Festival with this data.
   */
  create: Prisma.XOR<Prisma.FestivalCreateInput, Prisma.FestivalUncheckedCreateInput>
  /**
   * In case the Festival was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FestivalUpdateInput, Prisma.FestivalUncheckedUpdateInput>
}

/**
 * Festival delete
 */
export type FestivalDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Festival
   */
  select?: Prisma.FestivalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Festival
   */
  omit?: Prisma.FestivalOmit<ExtArgs> | null
  /**
   * Filter which Festival to delete.
   */
  where: Prisma.FestivalWhereUniqueInput
}

/**
 * Festival deleteMany
 */
export type FestivalDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Festivals to delete
   */
  where?: Prisma.FestivalWhereInput
  /**
   * Limit how many Festivals to delete.
   */
  limit?: number
}

/**
 * Festival without action
 */
export type FestivalDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Festival
   */
  select?: Prisma.FestivalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Festival
   */
  omit?: Prisma.FestivalOmit<ExtArgs> | null
}
